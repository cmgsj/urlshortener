// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/proto/urlpb/urlpb.proto

package urlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlServiceClient is the client API for UrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlServiceClient interface {
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error)
	CreateUrl(ctx context.Context, in *CreateUrlRequest, opts ...grpc.CallOption) (*CreateUrlResponse, error)
	UpdateUrl(ctx context.Context, in *UpdateUrlRequest, opts ...grpc.CallOption) (*UpdateUrlResponse, error)
	DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*DeleteUrlResponse, error)
}

type urlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlServiceClient(cc grpc.ClientConnInterface) UrlServiceClient {
	return &urlServiceClient{cc}
}

func (c *urlServiceClient) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error) {
	out := new(GetUrlResponse)
	err := c.cc.Invoke(ctx, "/urlpb.UrlService/GetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) CreateUrl(ctx context.Context, in *CreateUrlRequest, opts ...grpc.CallOption) (*CreateUrlResponse, error) {
	out := new(CreateUrlResponse)
	err := c.cc.Invoke(ctx, "/urlpb.UrlService/CreateUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) UpdateUrl(ctx context.Context, in *UpdateUrlRequest, opts ...grpc.CallOption) (*UpdateUrlResponse, error) {
	out := new(UpdateUrlResponse)
	err := c.cc.Invoke(ctx, "/urlpb.UrlService/UpdateUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlServiceClient) DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*DeleteUrlResponse, error) {
	out := new(DeleteUrlResponse)
	err := c.cc.Invoke(ctx, "/urlpb.UrlService/DeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlServiceServer is the server API for UrlService service.
// All implementations must embed UnimplementedUrlServiceServer
// for forward compatibility
type UrlServiceServer interface {
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	CreateUrl(context.Context, *CreateUrlRequest) (*CreateUrlResponse, error)
	UpdateUrl(context.Context, *UpdateUrlRequest) (*UpdateUrlResponse, error)
	DeleteUrl(context.Context, *DeleteUrlRequest) (*DeleteUrlResponse, error)
	mustEmbedUnimplementedUrlServiceServer()
}

// UnimplementedUrlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlServiceServer struct {
}

func (UnimplementedUrlServiceServer) GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedUrlServiceServer) CreateUrl(context.Context, *CreateUrlRequest) (*CreateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUrl not implemented")
}
func (UnimplementedUrlServiceServer) UpdateUrl(context.Context, *UpdateUrlRequest) (*UpdateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUrl not implemented")
}
func (UnimplementedUrlServiceServer) DeleteUrl(context.Context, *DeleteUrlRequest) (*DeleteUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrl not implemented")
}
func (UnimplementedUrlServiceServer) mustEmbedUnimplementedUrlServiceServer() {}

// UnsafeUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlServiceServer will
// result in compilation errors.
type UnsafeUrlServiceServer interface {
	mustEmbedUnimplementedUrlServiceServer()
}

func RegisterUrlServiceServer(s grpc.ServiceRegistrar, srv UrlServiceServer) {
	s.RegisterService(&UrlService_ServiceDesc, srv)
}

func _UrlService_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlpb.UrlService/GetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_CreateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).CreateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlpb.UrlService/CreateUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).CreateUrl(ctx, req.(*CreateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_UpdateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).UpdateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlpb.UrlService/UpdateUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).UpdateUrl(ctx, req.(*UpdateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlService_DeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlServiceServer).DeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlpb.UrlService/DeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlServiceServer).DeleteUrl(ctx, req.(*DeleteUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlService_ServiceDesc is the grpc.ServiceDesc for UrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlpb.UrlService",
	HandlerType: (*UrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUrl",
			Handler:    _UrlService_GetUrl_Handler,
		},
		{
			MethodName: "CreateUrl",
			Handler:    _UrlService_CreateUrl_Handler,
		},
		{
			MethodName: "UpdateUrl",
			Handler:    _UrlService_UpdateUrl_Handler,
		},
		{
			MethodName: "DeleteUrl",
			Handler:    _UrlService_DeleteUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/urlpb/urlpb.proto",
}
