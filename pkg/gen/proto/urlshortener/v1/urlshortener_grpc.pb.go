// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: urlshortener/v1/urlshortener.proto

package urlshortenerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	URLShortenerService_ListURLs_FullMethodName  = "/urlshortener.v1.URLShortenerService/ListURLs"
	URLShortenerService_GetURL_FullMethodName    = "/urlshortener.v1.URLShortenerService/GetURL"
	URLShortenerService_CreateURL_FullMethodName = "/urlshortener.v1.URLShortenerService/CreateURL"
	URLShortenerService_UpdateURL_FullMethodName = "/urlshortener.v1.URLShortenerService/UpdateURL"
	URLShortenerService_DeleteURL_FullMethodName = "/urlshortener.v1.URLShortenerService/DeleteURL"
)

// URLShortenerServiceClient is the client API for URLShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerServiceClient interface {
	ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
	CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error)
	UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*UpdateURLResponse, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error)
}

type uRLShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerServiceClient(cc grpc.ClientConnInterface) URLShortenerServiceClient {
	return &uRLShortenerServiceClient{cc}
}

func (c *uRLShortenerServiceClient) ListURLs(ctx context.Context, in *ListURLsRequest, opts ...grpc.CallOption) (*ListURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListURLsResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_ListURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_GetURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*CreateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_CreateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*UpdateURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_UpdateURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_DeleteURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerServiceServer is the server API for URLShortenerService service.
// All implementations must embed UnimplementedURLShortenerServiceServer
// for forward compatibility.
type URLShortenerServiceServer interface {
	ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error)
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
	CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error)
	UpdateURL(context.Context, *UpdateURLRequest) (*UpdateURLResponse, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error)
	mustEmbedUnimplementedURLShortenerServiceServer()
}

// UnimplementedURLShortenerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedURLShortenerServiceServer struct{}

func (UnimplementedURLShortenerServiceServer) ListURLs(context.Context, *ListURLsRequest) (*ListURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListURLs not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) CreateURL(context.Context, *CreateURLRequest) (*CreateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) UpdateURL(context.Context, *UpdateURLRequest) (*UpdateURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) mustEmbedUnimplementedURLShortenerServiceServer() {}
func (UnimplementedURLShortenerServiceServer) testEmbeddedByValue()                             {}

// UnsafeURLShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServiceServer will
// result in compilation errors.
type UnsafeURLShortenerServiceServer interface {
	mustEmbedUnimplementedURLShortenerServiceServer()
}

func RegisterURLShortenerServiceServer(s grpc.ServiceRegistrar, srv URLShortenerServiceServer) {
	// If the following call pancis, it indicates UnimplementedURLShortenerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&URLShortenerService_ServiceDesc, srv)
}

func _URLShortenerService_ListURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).ListURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_ListURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).ListURLs(ctx, req.(*ListURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_CreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).CreateURL(ctx, req.(*CreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_UpdateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).UpdateURL(ctx, req.(*UpdateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_DeleteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortenerService_ServiceDesc is the grpc.ServiceDesc for URLShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlshortener.v1.URLShortenerService",
	HandlerType: (*URLShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListURLs",
			Handler:    _URLShortenerService_ListURLs_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _URLShortenerService_GetURL_Handler,
		},
		{
			MethodName: "CreateURL",
			Handler:    _URLShortenerService_CreateURL_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _URLShortenerService_UpdateURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _URLShortenerService_DeleteURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshortener/v1/urlshortener.proto",
}
