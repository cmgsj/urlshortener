// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/urls/urls.proto

package urls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	api "urlshortener/pkg/api"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlsClient is the client API for Urls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlsClient interface {
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error)
	CreateUrl(ctx context.Context, in *CreateUrlRequest, opts ...grpc.CallOption) (*CreateUrlResponse, error)
	UpdateUrl(ctx context.Context, in *UpdateUrlRequest, opts ...grpc.CallOption) (*api.NoContent, error)
	DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*api.NoContent, error)
	Ping(ctx context.Context, in *api.PingRequest, opts ...grpc.CallOption) (*api.PingResponse, error)
}

type urlsClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlsClient(cc grpc.ClientConnInterface) UrlsClient {
	return &urlsClient{cc}
}

func (c *urlsClient) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error) {
	out := new(GetUrlResponse)
	err := c.cc.Invoke(ctx, "/urlss.Urls/GetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) CreateUrl(ctx context.Context, in *CreateUrlRequest, opts ...grpc.CallOption) (*CreateUrlResponse, error) {
	out := new(CreateUrlResponse)
	err := c.cc.Invoke(ctx, "/urlss.Urls/CreateUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) UpdateUrl(ctx context.Context, in *UpdateUrlRequest, opts ...grpc.CallOption) (*api.NoContent, error) {
	out := new(api.NoContent)
	err := c.cc.Invoke(ctx, "/urlss.Urls/UpdateUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) DeleteUrl(ctx context.Context, in *DeleteUrlRequest, opts ...grpc.CallOption) (*api.NoContent, error) {
	out := new(api.NoContent)
	err := c.cc.Invoke(ctx, "/urlss.Urls/DeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlsClient) Ping(ctx context.Context, in *api.PingRequest, opts ...grpc.CallOption) (*api.PingResponse, error) {
	out := new(api.PingResponse)
	err := c.cc.Invoke(ctx, "/urlss.Urls/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlsServer is the server API for Urls service.
// All implementations must embed UnimplementedUrlsServer
// for forward compatibility
type UrlsServer interface {
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	CreateUrl(context.Context, *CreateUrlRequest) (*CreateUrlResponse, error)
	UpdateUrl(context.Context, *UpdateUrlRequest) (*api.NoContent, error)
	DeleteUrl(context.Context, *DeleteUrlRequest) (*api.NoContent, error)
	Ping(context.Context, *api.PingRequest) (*api.PingResponse, error)
	mustEmbedUnimplementedUrlsServer()
}

// UnimplementedUrlsServer must be embedded to have forward compatible implementations.
type UnimplementedUrlsServer struct {
}

func (UnimplementedUrlsServer) GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedUrlsServer) CreateUrl(context.Context, *CreateUrlRequest) (*CreateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUrl not implemented")
}
func (UnimplementedUrlsServer) UpdateUrl(context.Context, *UpdateUrlRequest) (*api.NoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUrl not implemented")
}
func (UnimplementedUrlsServer) DeleteUrl(context.Context, *DeleteUrlRequest) (*api.NoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrl not implemented")
}
func (UnimplementedUrlsServer) Ping(context.Context, *api.PingRequest) (*api.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUrlsServer) mustEmbedUnimplementedUrlsServer() {}

// UnsafeUrlsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlsServer will
// result in compilation errors.
type UnsafeUrlsServer interface {
	mustEmbedUnimplementedUrlsServer()
}

func RegisterUrlsServer(s grpc.ServiceRegistrar, srv UrlsServer) {
	s.RegisterService(&Urls_ServiceDesc, srv)
}

func _Urls_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlss.Urls/GetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_CreateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).CreateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlss.Urls/CreateUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).CreateUrl(ctx, req.(*CreateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_UpdateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).UpdateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlss.Urls/UpdateUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).UpdateUrl(ctx, req.(*UpdateUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_DeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).DeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlss.Urls/DeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).DeleteUrl(ctx, req.(*DeleteUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urls_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlss.Urls/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlsServer).Ping(ctx, req.(*api.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Urls_ServiceDesc is the grpc.ServiceDesc for Urls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Urls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlss.Urls",
	HandlerType: (*UrlsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUrl",
			Handler:    _Urls_GetUrl_Handler,
		},
		{
			MethodName: "CreateUrl",
			Handler:    _Urls_CreateUrl_Handler,
		},
		{
			MethodName: "UpdateUrl",
			Handler:    _Urls_UpdateUrl_Handler,
		},
		{
			MethodName: "DeleteUrl",
			Handler:    _Urls_DeleteUrl_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Urls_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/urls/urls.proto",
}
