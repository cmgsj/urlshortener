// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: urls.sql

package db

import (
	"context"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO
	urls (url_id, redirect_url)
VALUES
	(?, ?) RETURNING url_id, redirect_url
`

type CreateUrlParams struct {
	UrlID       string `db:"url_id" json:"url_id"`
	RedirectUrl string `db:"redirect_url" json:"redirect_url"`
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (*Url, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.UrlID, arg.RedirectUrl)
	var i Url
	err := row.Scan(&i.UrlID, &i.RedirectUrl)
	return &i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE
	url_id = ?
`

func (q *Queries) DeleteUrl(ctx context.Context, urlID string) error {
	_, err := q.db.ExecContext(ctx, deleteUrl, urlID)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT
	url_id, redirect_url
FROM
	urls
WHERE
	url_id = ?
LIMIT
	1
`

func (q *Queries) GetUrl(ctx context.Context, urlID string) (*Url, error) {
	row := q.db.QueryRowContext(ctx, getUrl, urlID)
	var i Url
	err := row.Scan(&i.UrlID, &i.RedirectUrl)
	return &i, err
}

const listUrls = `-- name: ListUrls :many
SELECT
	url_id, redirect_url
FROM
	urls
`

func (q *Queries) ListUrls(ctx context.Context) ([]*Url, error) {
	rows, err := q.db.QueryContext(ctx, listUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.UrlID, &i.RedirectUrl); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrl = `-- name: UpdateUrl :exec
UPDATE urls
SET
	redirect_url = ?
WHERE
	url_id = ?
`

type UpdateUrlParams struct {
	RedirectUrl string `db:"redirect_url" json:"redirect_url"`
	UrlID       string `db:"url_id" json:"url_id"`
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateUrl, arg.RedirectUrl, arg.UrlID)
	return err
}
